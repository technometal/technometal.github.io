{"version":3,"sources":["components/Header.js","components/Message.js","components/Posts.js","components/Post.js","components/PostForm.js","components/NotFound.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","to","Message","type","saved","updated","deleted","Posts","posts","length","key","map","post","id","slug","title","Post","contentHTML","QuillDeltaToHtmlConverter","content","ops","convert","dangerouslySetInnerHTML","__html","axios","require","default","PostForm","propsPost","addNewPost","updatePost","useState","setPost","setSaved","prevPostRef","useRef","useEffect","current","prevPost","quillRef","React","getEditor","setContents","handlePostForm","event","a","preventDefault","put","alert","console","log","onSubmit","htmlFor","defaultValue","value","onChange","target","ref","delta","source","editor","getContents","NotFound","Login","e","data","email","password","then","response","localStorage","setItem","headers","get","class","name","placeholder","for","App","setPosts","message","setMessage","setFlashMessage","setTimeout","getPosts","postsdata","getNewSlugFromTitle","encodeURIComponent","toLowerCase","split","join","index","findIndex","p","oldPosts","slice","concat","updatedPosts","sort","b","exact","path","render","find","match","params","postSlug","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dca961cc.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = (props) => (\n  <header className=\"App-header\">\n    <ul className=\"container\">\n      <li>\n        <Link to=\"/\">My Site</Link>\n      </li>\n      <li>\n        <Link to=\"/new\">New Post</Link>\n      </li>\n      <li>\n        <Link to=\"/login\">Login Page</Link>\n      </li>\n    </ul>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst Message = ({ type }) => {\n  const messages = {\n    saved: \"Post has been saved!\",\n    updated: \"Post has been updated!\",\n    deleted: \"Post has been deleted.\"\n  };\n  return (\n    <div className={`App-message ${type}`}>\n      <p className=\"container\">\n        <strong>{messages[type]}</strong>\n      </p>\n    </div>\n  );\n};\n\nexport default Message;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Posts = ({ posts }) => (\n  <article className=\"posts container\">\n    <h1>Posts</h1>\n    <ul>\n      {posts.length < 1 && <li key=\"empty\">No posts yet!</li>}\n      {posts.map(post => (\n        <li key={post.id}>\n          <h2>\n            <Link to={`/post/${post.slug}`}>{post.title}</Link>\n          </h2>\n          <p>\n            <Link to={`/edit/${post.slug}`}>Edit</Link>\n          </p>\n        </li>\n      ))}\n    </ul>\n  </article>\n);\n\nexport default Posts;\n","import React from \"react\";\nimport { QuillDeltaToHtmlConverter } from \"quill-delta-to-html\";\n\nconst Post = ({ post }) => {\n  const converter = new QuillDeltaToHtmlConverter(post.content.ops, {});\n  const contentHTML = converter.convert();\n\n  return (\n    <article className=\"post container\">\n      <h1>{post.title}</h1>\n      <div\n        className=\"content\"\n        dangerouslySetInnerHTML={{ __html: contentHTML }}\n      />\n    </article>\n  );\n};\n\nexport default Post;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Quill from \"react-quill\";\n\nconst axios = require(\"axios\").default;\n\nconst PostForm = ({ post: propsPost, addNewPost, updatePost }) => {\n  const [post, setPost] = useState({ ...propsPost });\n  const [saved, setSaved] = useState(false);\n\n  const prevPostRef = useRef();\n  useEffect(() => {\n    prevPostRef.current = post;\n  }, [post]);\n  const prevPost = prevPostRef.current;\n\n  const quillRef = React.useRef();\n  useEffect(() => {\n    if (prevPost && quillRef.current) {\n      if (propsPost.id !== prevPost.id) {\n        setPost({ ...propsPost });\n        quillRef.current.getEditor().setContents(``);\n      }\n    }\n  }, [prevPost, propsPost]);\n\n//-----------------------------------------\n  /*const addNewPost = async () => {\n    try {\n      axios\n        .get(\"http://localhost:3001/posts\")\n        .then((resp) => setPost(resp.data));\n    } catch (error) {\n      //catching rejected requests\n      console.log(error);\n    }\n  };*/\n//---------------------------------------\n\n\n  const handlePostForm = async (event) => {\n    event.preventDefault();\n    if (post.title) {\n      if (updatePost) {\n        updatePost(post);\n      } else {\n        addNewPost(post);\n      }\n      setSaved(true);\n      await axios.put(\"http://localhost:3001/posts\", post)\n      //window.location.replace(\"/\")\n    } else {\n      alert(\"Title required\");\n    }\n    console.log(post);\n  };\n\n\n  \n\n  if (saved === true) {\n    return <Redirect to=\"/\" />;\n  }\n  return (\n    <form className=\"container\" onSubmit={handlePostForm}>\n      <h1>Add a New Post</h1>\n      <p>\n        <label htmlFor=\"form-title\">Title:</label>\n        <br />\n        <input\n          defaultValue={post.title}\n          id=\"form-title\"\n          value={post.title}\n          onChange={(event) =>\n            setPost({\n              ...post,\n              title: event.target.value,\n            })\n          }\n        />\n      </p>\n      <p>\n        <label htmlFor=\"form-content\">Content:</label>\n      </p>\n      <Quill\n        ref={quillRef}\n        defaultValue={post.content}\n        onChange={(content, delta, source, editor) => {\n          setPost({\n            ...post,\n            content: editor.getContents(),\n          });\n        }}\n      />\n      <p>\n        <button type=\"submit\">Save</button>\n      </p>\n    </form>\n  );\n};\nexport default PostForm;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = () => (\n  <article className=\"not-found container\">\n    <h1>404!</h1>\n    <p>\n      Content not found. <Link to=\"/\">Return to posts</Link>\n    </p>\n  </article>\n);\n\nexport default NotFound;\n","import React, { useState } from 'react';\nconst axios = require(\"axios\").default;\n\n\n\n\nconst Login = (props) => {\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const data = {\n            email: e.target.email.value,\n            password: e.target.password.value // it means = the remaining value from the password input field that is targetted by the user in the from (e)\n        }\n        await axios.post(\"http://localhost:3001/users/login\", data)\n        .then((response) => localStorage.setItem(response.headers.get(\"x-auth\")));\n        // console.log(data);\n    }\n\n\n        return (\n            <div>\n                {/* <input placeholder=\"Enter your username\" id=\"username\" type=\"text\"/>\n                <input placeholder=\"Enter your password\" id=\"password\" type=\"text\"/> */}\n                <form className=\"form-signin\" onSubmit={onSubmit}>\n                    {/* <img class=\"mb-4\" src=\"../assets/brand/bootstrap-logo.svg\" alt=\"\" width=\"72\" height=\"57\"> */}\n                    <h1 class=\"h3 mb-3 fw-normal\">Please sign in</h1>\n\n                    <div class=\"form-floating\">\n                        <input type=\"email\" class=\"form-control\" name=\"email\" id=\"floatingInput\" placeholder=\"name@example.com\"/>\n                        <label for=\"floatingInput\">Email address</label>\n                    </div>\n\n                    <div class=\"form-floating\">\n                        <input type=\"password\" class=\"form-control\" name=\"password\" id=\"floatingPassword\" placeholder=\"Password\"/>\n                        <label for=\"floatingPassword\">Password</label>\n                    </div>\n\n                    <div class=\"checkbox mb-3\">\n                        <label>\n                            <input type=\"checkbox\" value=\"remember-me\"/> Remember me\n                        </label>\n                    </div>\n                        <button class=\"w-100 btn btn-lg btn-primary\"  type=\"submit\">Sign in</button>\n                        <p class=\"mt-5 mb-3 text-muted\">&copy; 2017–2021</p>\n                </form>\n\n            </div>\n        )}\n\n\nexport default Login;","import React, { useState, useEffect } from \"react\";\nimport {\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Message from \"./components/Message\";\nimport Posts from \"./components/Posts\";\nimport Post from \"./components/Post\";\nimport PostForm from \"./components/PostForm\";\nimport NotFound from \"./components/NotFound\";\nimport Login from \"./components/Login\";\n\nimport \"./App.css\";\n\nconst axios = require(\"axios\").default;\n\nconst App = (props) => {\n  const [posts, setPosts] = useState([]);\n  const [message, setMessage] = useState(null);\n\n  const setFlashMessage = (message) => {\n    setMessage(message);\n    setTimeout(() => {\n      setMessage(null);\n    }, 1600);\n  };\n\n  const getPosts = async () => {\n    const postsdata = await axios.get(\"http://localhost:3001/posts\")\n    console.log(postsdata.data);\n\n    setPosts(postsdata.data);\n  }\n\n  useEffect(()=> getPosts(),[])\n  \n\n  const getNewSlugFromTitle = (title) =>\n    encodeURIComponent(title.toLowerCase().split(\" \").join(\"-\"));\n\n  const addNewPost = (post) => {\n    post.id = posts.length + 1;\n    post.slug = getNewSlugFromTitle(post.title);\n    if(post.title.length < 5) {\n      alert (\"post not accepted, keep trying\")\n    } else {\n      setPosts([...posts, post]);\n      setFlashMessage(`saved`);\n    }\n  };\n\n  const updatePost = (post) => {\n    post.slug = getNewSlugFromTitle(post.title);\n    const index = posts.findIndex((p) => p.id === post.id);\n    const oldPosts = posts.slice(0, index).concat(posts.slice(index + 1));\n    const updatedPosts = [...oldPosts, post].sort((a, b) => a.id - b.id);\n    setPosts(updatedPosts);\n    setFlashMessage(`updated`);\n  };\n\n  return (\n      <div className=\"App\">\n        <Header />\n        \n        {message && <Message type={message} />}\n        <Switch>\n          <Route exact path=\"/\" render={() => <Posts posts={posts} />} />\n          <Route\n            path=\"/post/:postSlug\"\n            render={(props) => {\n              const post = posts.find(\n                (post) => post.slug === props.match.params.postSlug\n              );\n              if (post) {\n                return <Post post={post} />;\n              } else {\n                return <Redirect to=\"/\" />;\n              }\n            }}\n          />\n          <Route\n            exact\n            path=\"/new\"\n            render={() => (\n              <PostForm\n                addNewPost={addNewPost}\n                post={{ id: 0, slug: \"\", title: \"\", content: \"\" }}\n              />\n            )}\n          />\n\n          <Route path=\"/login\" component={Login}/>\n\n          \n          <Route\n            path=\"/edit/:postSlug\"\n            render={(props) => {\n              const post = posts.find(\n                (post) => post.slug === props.match.params.postSlug\n              );\n              if (post) {\n                return <PostForm updatePost={updatePost} post={post} />;\n              } else {\n                return <Redirect to=\"/\" />;\n              }\n            }}\n          />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n  );\n};\n\n// function App () {\n//   return (\n//   <div>\n//     <Switch>\n//       <Route path=\"/login\" component={Login}/>\n//       <Route component={NotFound} />\n//     </Switch>\n//   </div>)\n\n// }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<BrowserRouter>\n      <App />\n    </BrowserRouter>, document.getElementById('root'));\n    \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}